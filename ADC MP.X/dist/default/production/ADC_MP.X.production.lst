

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Feb 16 22:57:25 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    10                           	dabs	1,0x7E,2
    11  0000                     
    12                           ; Version 2.20
    13                           ; Generated 12/02/2020 GMT
    14                           ; 
    15                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F887 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  008F                     	;# 
    91  0090                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0095                     	;# 
    99  0096                     	;# 
   100  0097                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  0105                     	;# 
   110  0107                     	;# 
   111  0108                     	;# 
   112  0109                     	;# 
   113  010C                     	;# 
   114  010C                     	;# 
   115  010D                     	;# 
   116  010E                     	;# 
   117  010F                     	;# 
   118  0185                     	;# 
   119  0187                     	;# 
   120  0188                     	;# 
   121  0189                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0088                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  008F                     	;# 
   169  0090                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0093                     	;# 
   174  0093                     	;# 
   175  0094                     	;# 
   176  0095                     	;# 
   177  0096                     	;# 
   178  0097                     	;# 
   179  0098                     	;# 
   180  0099                     	;# 
   181  009A                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  0105                     	;# 
   188  0107                     	;# 
   189  0108                     	;# 
   190  0109                     	;# 
   191  010C                     	;# 
   192  010C                     	;# 
   193  010D                     	;# 
   194  010E                     	;# 
   195  010F                     	;# 
   196  0185                     	;# 
   197  0187                     	;# 
   198  0188                     	;# 
   199  0189                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202  0006                     _PORTB	set	6
   203  001E                     _ADRESH	set	30
   204  001F                     _ADCON0	set	31
   205  00F9                     _GO_nDONE	set	249
   206  0087                     _TRISC	set	135
   207  0086                     _TRISB	set	134
   208  0085                     _TRISA	set	133
   209  009E                     _ADRESL	set	158
   210  009F                     _ADCON1	set	159
   211                           
   212                           	psect	cinit
   213  07FC                     start_initialization:	
   214                           ; #config settings
   215                           
   216  07FC                     __initialization:
   217  07FC                     end_of_initialization:	
   218                           ;End of C runtime variable initialization code
   219                           
   220  07FC                     __end_of__initialization:
   221  07FC  0183               	clrf	3
   222  07FD  120A  118A  2FA2   	ljmp	_main	;jump to C main() function
   223                           
   224                           	psect	cstackCOMMON
   225  0070                     __pcstackCOMMON:
   226  0070                     ?_ADC_Init:
   227  0070                     ??_ADC_Init:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_main:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_ADC_Read:	
   234                           ; 1 bytes @ 0x0
   235                           
   236                           
   237                           ; 2 bytes @ 0x0
   238  0070                     	ds	2
   239  0072                     ??_ADC_Read:
   240                           
   241                           ; 1 bytes @ 0x2
   242  0072                     	ds	2
   243  0074                     ADC_Read@channel:
   244                           
   245                           ; 1 bytes @ 0x4
   246  0074                     	ds	1
   247  0075                     ??_main:
   248                           
   249                           ; 1 bytes @ 0x5
   250  0075                     	ds	2
   251  0077                     main@a:
   252                           
   253                           ; 2 bytes @ 0x7
   254  0077                     	ds	2
   255                           
   256                           	psect	maintext
   257  07A2                     __pmaintext:	
   258 ;;
   259 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   260 ;;
   261 ;; *************** function _main *****************
   262 ;; Defined at:
   263 ;;		line 51 in file "ADC MP.c"
   264 ;; Parameters:    Size  Location     Type
   265 ;;		None
   266 ;; Auto vars:     Size  Location     Type
   267 ;;  a               2    7[COMMON] unsigned int 
   268 ;; Return value:  Size  Location     Type
   269 ;;                  1    wreg      void 
   270 ;; Registers used:
   271 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   272 ;; Tracked objects:
   273 ;;		On entry : B00/0
   274 ;;		On exit  : 0/0
   275 ;;		Unchanged: 0/0
   276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   277 ;;      Params:         0       0       0       0       0
   278 ;;      Locals:         2       0       0       0       0
   279 ;;      Temps:          2       0       0       0       0
   280 ;;      Totals:         4       0       0       0       0
   281 ;;Total ram usage:        4 bytes
   282 ;; Hardware stack levels required when called:    1
   283 ;; This function calls:
   284 ;;		_ADC_Init
   285 ;;		_ADC_Read
   286 ;; This function is called by:
   287 ;;		Startup code after reset
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291                           
   292                           ;psect for function _main
   293  07A2                     _main:
   294  07A2                     l679:	
   295                           ;incstack = 0
   296                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   297                           
   298                           
   299                           ;ADC MP.c: 53:   unsigned int a;;ADC MP.c: 54:   TRISA = 0xFF;
   300  07A2  30FF               	movlw	255
   301  07A3  1683               	bsf	3,5	;RP0=1, select bank1
   302  07A4  1303               	bcf	3,6	;RP1=0, select bank1
   303  07A5  0085               	movwf	5	;volatile
   304  07A6                     l681:
   305                           
   306                           ;ADC MP.c: 55:   TRISB = 0x00;
   307  07A6  0186               	clrf	6	;volatile
   308  07A7                     l683:
   309                           
   310                           ;ADC MP.c: 56:   TRISC = 0x00;
   311  07A7  0187               	clrf	7	;volatile
   312  07A8                     l685:
   313                           
   314                           ;ADC MP.c: 57:   ADC_Init();
   315  07A8  120A  118A  279A  120A  118A  	fcall	_ADC_Init
   316  07AD                     l687:
   317                           
   318                           ;ADC MP.c: 60:   {;ADC MP.c: 61:     a = ADC_Read(0);
   319  07AD  3000               	movlw	0
   320  07AE  120A  118A  27C8  120A  118A  	fcall	_ADC_Read
   321  07B3  0871               	movf	?_ADC_Read+1,w
   322  07B4  00F8               	movwf	main@a+1
   323  07B5  0870               	movf	?_ADC_Read,w
   324  07B6  00F7               	movwf	main@a
   325  07B7                     l689:
   326                           
   327                           ;ADC MP.c: 63:     PORTB = a>>8;
   328  07B7  0878               	movf	main@a+1,w
   329  07B8  1283               	bcf	3,5	;RP0=0, select bank0
   330  07B9  1303               	bcf	3,6	;RP1=0, select bank0
   331  07BA  0086               	movwf	6	;volatile
   332  07BB                     l691:
   333                           
   334                           ;ADC MP.c: 64:     _delay((unsigned long)((50)*(8000000/4000.0)));
   335  07BB  3082               	movlw	130
   336  07BC  00F6               	movwf	??_main+1
   337  07BD  30DD               	movlw	221
   338  07BE  00F5               	movwf	??_main
   339  07BF                     u77:
   340  07BF  0BF5               	decfsz	??_main,f
   341  07C0  2FBF               	goto	u77
   342  07C1  0BF6               	decfsz	??_main+1,f
   343  07C2  2FBF               	goto	u77
   344  07C3  2FC4               	nop2
   345                           
   346                           ;ADC MP.c: 65:   }while(1);
   347  07C4  2FAD               	goto	l687
   348  07C5  120A  118A  2800   	ljmp	start
   349  07C8                     __end_of_main:
   350                           
   351                           	psect	text1
   352  07C8                     __ptext1:	
   353 ;; *************** function _ADC_Read *****************
   354 ;; Defined at:
   355 ;;		line 38 in file "ADC MP.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;  channel         1    wreg     unsigned char 
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  channel         1    4[COMMON] unsigned char 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  2    0[COMMON] unsigned int 
   362 ;; Registers used:
   363 ;;		wreg, status,2, status,0, btemp+1
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   369 ;;      Params:         2       0       0       0       0
   370 ;;      Locals:         1       0       0       0       0
   371 ;;      Temps:          2       0       0       0       0
   372 ;;      Totals:         5       0       0       0       0
   373 ;;Total ram usage:        5 bytes
   374 ;; Hardware stack levels used:    1
   375 ;; This function calls:
   376 ;;		Nothing
   377 ;; This function is called by:
   378 ;;		_main
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           
   383                           ;psect for function _ADC_Read
   384  07C8                     _ADC_Read:
   385                           
   386                           ;incstack = 0
   387                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
   388                           ;ADC_Read@channel stored from wreg
   389  07C8  00F4               	movwf	ADC_Read@channel
   390  07C9                     l663:
   391                           
   392                           ;ADC MP.c: 38: unsigned int ADC_Read(unsigned char channel);ADC MP.c: 39: {;ADC MP.c: 40
      +                          :   if(channel > 7)
   393  07C9  3008               	movlw	8
   394  07CA  0274               	subwf	ADC_Read@channel,w
   395  07CB  1C03               	skipc
   396  07CC  2FCE               	goto	u41
   397  07CD  2FCF               	goto	u40
   398  07CE                     u41:
   399  07CE  2FD2               	goto	l669
   400  07CF                     u40:
   401  07CF                     l665:
   402                           
   403                           ;ADC MP.c: 41:     return 0;
   404  07CF  01F0               	clrf	?_ADC_Read
   405  07D0  01F1               	clrf	?_ADC_Read+1
   406  07D1  2FFB               	goto	l27
   407  07D2                     l669:
   408                           
   409                           ;ADC MP.c: 43:   ADCON0 &= 0xC5;
   410  07D2  30C5               	movlw	197
   411  07D3  00FF               	movwf	btemp+1
   412  07D4  087F               	movf	btemp+1,w
   413  07D5  1283               	bcf	3,5	;RP0=0, select bank0
   414  07D6  1303               	bcf	3,6	;RP1=0, select bank0
   415  07D7  059F               	andwf	31,f	;volatile
   416                           
   417                           ;ADC MP.c: 44:   ADCON0 |= channel<<3;
   418  07D8  0874               	movf	ADC_Read@channel,w	;volatile
   419  07D9  00F2               	movwf	??_ADC_Read
   420  07DA  3002               	movlw	2
   421  07DB                     u55:
   422  07DB  1003               	clrc
   423  07DC  0DF2               	rlf	??_ADC_Read,f
   424  07DD  3EFF               	addlw	-1
   425  07DE  1D03               	skipz
   426  07DF  2FDB               	goto	u55
   427  07E0  1003               	clrc
   428  07E1  0D72               	rlf	??_ADC_Read,w
   429  07E2  00FF               	movwf	btemp+1
   430  07E3  087F               	movf	btemp+1,w
   431  07E4  049F               	iorwf	31,f	;volatile
   432  07E5                     l671:
   433                           
   434                           ;ADC MP.c: 45:   _delay((unsigned long)((2)*(8000000/4000.0)));
   435  07E5  3006               	movlw	6
   436  07E6  00F3               	movwf	??_ADC_Read+1
   437  07E7  3030               	movlw	48
   438  07E8  00F2               	movwf	??_ADC_Read
   439  07E9                     u87:
   440  07E9  0BF2               	decfsz	??_ADC_Read,f
   441  07EA  2FE9               	goto	u87
   442  07EB  0BF3               	decfsz	??_ADC_Read+1,f
   443  07EC  2FE9               	goto	u87
   444  07ED  0000               	nop
   445  07EE                     l673:
   446                           
   447                           ;ADC MP.c: 46:   GO_nDONE = 1;
   448  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   449  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   450  07F0  149F               	bsf	31,1	;volatile
   451  07F1                     l28:	
   452                           ;ADC MP.c: 47:   while(GO_nDONE);
   453                           
   454  07F1  189F               	btfsc	31,1	;volatile
   455  07F2  2FF4               	goto	u61
   456  07F3  2FF5               	goto	u60
   457  07F4                     u61:
   458  07F4  2FF1               	goto	l28
   459  07F5                     u60:
   460  07F5                     l675:
   461                           
   462                           ;ADC MP.c: 48:   return ((ADRESH<<8)+ADRESL);
   463  07F5  081E               	movf	30,w	;volatile
   464  07F6  00F1               	movwf	?_ADC_Read+1
   465  07F7  1683               	bsf	3,5	;RP0=1, select bank1
   466  07F8  1303               	bcf	3,6	;RP1=0, select bank1
   467  07F9  081E               	movf	30,w	;volatile
   468  07FA  00F0               	movwf	?_ADC_Read
   469  07FB                     l27:
   470  07FB  0008               	return
   471  07FC                     __end_of_ADC_Read:
   472                           
   473                           	psect	text2
   474  079A                     __ptext2:	
   475 ;; *************** function _ADC_Init *****************
   476 ;; Defined at:
   477 ;;		line 32 in file "ADC MP.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;		None
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      void 
   484 ;; Registers used:
   485 ;;		wreg, status,2
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   491 ;;      Params:         0       0       0       0       0
   492 ;;      Locals:         0       0       0       0       0
   493 ;;      Temps:          0       0       0       0       0
   494 ;;      Totals:         0       0       0       0       0
   495 ;;Total ram usage:        0 bytes
   496 ;; Hardware stack levels used:    1
   497 ;; This function calls:
   498 ;;		Nothing
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           
   505                           ;psect for function _ADC_Init
   506  079A                     _ADC_Init:
   507  079A                     l629:	
   508                           ;incstack = 0
   509                           ; Regs used in _ADC_Init: [wreg+status,2]
   510                           
   511                           
   512                           ;ADC MP.c: 34:   ADCON0 = 0x81;
   513  079A  3081               	movlw	129
   514  079B  1283               	bcf	3,5	;RP0=0, select bank0
   515  079C  1303               	bcf	3,6	;RP1=0, select bank0
   516  079D  009F               	movwf	31	;volatile
   517  079E                     l631:
   518                           
   519                           ;ADC MP.c: 35:   ADCON1 = 0x00;
   520  079E  1683               	bsf	3,5	;RP0=1, select bank1
   521  079F  1303               	bcf	3,6	;RP1=0, select bank1
   522  07A0  019F               	clrf	31	;volatile
   523  07A1                     l23:
   524  07A1  0008               	return
   525  07A2                     __end_of_ADC_Init:
   526  007E                     btemp	set	126	;btemp
   527  007E                     wtemp0	set	126
   528                           
   529                           	psect	config
   530                           
   531                           ;Config register CONFIG1 @ 0x2007
   532                           ;	Oscillator Selection bits
   533                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   534                           ;	Watchdog Timer Enable bit
   535                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   536                           ;	Power-up Timer Enable bit
   537                           ;	PWRTE = OFF, PWRT disabled
   538                           ;	RE3/MCLR pin function select bit
   539                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   540                           ;	Code Protection bit
   541                           ;	CP = OFF, Program memory code protection is disabled
   542                           ;	Data Code Protection bit
   543                           ;	CPD = OFF, Data memory code protection is disabled
   544                           ;	Brown Out Reset Selection bits
   545                           ;	BOREN = OFF, BOR disabled
   546                           ;	Internal External Switchover bit
   547                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   548                           ;	Fail-Safe Clock Monitor Enabled bit
   549                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   550                           ;	Low Voltage Programming Enable bit
   551                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   552                           ;	In-Circuit Debugger Mode bit
   553                           ;	DEBUG = 0x1, unprogrammed default
   554  2007                     	org	8199
   555  2007  20D4               	dw	8404
   556                           
   557                           ;Config register CONFIG2 @ 0x2008
   558                           ;	Brown-out Reset Selection bit
   559                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   560                           ;	Flash Program Memory Self Write Enable bits
   561                           ;	WRT = OFF, Write protection off
   562  2008                     	org	8200
   563  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      67
                                              5 COMMON     4     4      0
                           _ADC_Init
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Feb 16 22:57:25 2021

                     l23 07A1                       l27 07FB                       l28 07F1  
                     u40 07CF                       u41 07CE                       u60 07F5  
                     u61 07F4                       u55 07DB                       u77 07BF  
                     u87 07E9                      l631 079E                      l629 079A  
                    l671 07E5                      l663 07C9                      l673 07EE  
                    l665 07CF                      l681 07A6                      l675 07F5  
                    l691 07BB                      l683 07A7                      l669 07D2  
                    l685 07A8                      l687 07AD                      l679 07A2  
                    l689 07B7                     _main 07A2                     btemp 007E  
       __end_of_ADC_Init 07A2         __end_of_ADC_Read 07FC                     start 0000  
                  ?_main 0070                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    main@a 0077  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07C8                   ??_main 0075                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
        ADC_Read@channel 0074                ?_ADC_Init 0070                ?_ADC_Read 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070               ??_ADC_Init 0070  
             ??_ADC_Read 0072               __pmaintext 07A2                  __ptext1 07C8  
                __ptext2 079A     end_of_initialization 07FC        __size_of_ADC_Init 0008  
      __size_of_ADC_Read 0034      start_initialization 07FC                ___latbits 0002  
               _ADC_Init 079A                 _ADC_Read 07C8                 _GO_nDONE 00F9  
          __size_of_main 0026  
