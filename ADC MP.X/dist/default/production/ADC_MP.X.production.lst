

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Feb 22 23:46:03 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.20
    14                           ; Generated 12/02/2020 GMT
    15                           ; 
    16                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F887 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0105                     	;# 
   111  0107                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  0185                     	;# 
   120  0187                     	;# 
   121  0188                     	;# 
   122  0189                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0088                     	;# 
   165  0089                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  008F                     	;# 
   170  0090                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0093                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0094                     	;# 
   177  0095                     	;# 
   178  0096                     	;# 
   179  0097                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  0105                     	;# 
   189  0107                     	;# 
   190  0108                     	;# 
   191  0109                     	;# 
   192  010C                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  0185                     	;# 
   198  0187                     	;# 
   199  0188                     	;# 
   200  0189                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  0007                     _PORTC	set	7
   204  0006                     _PORTB	set	6
   205  001E                     _ADRESH	set	30
   206  001F                     _ADCON0	set	31
   207  00F9                     _GO_nDONE	set	249
   208  0087                     _TRISC	set	135
   209  0086                     _TRISB	set	134
   210  0085                     _TRISA	set	133
   211  009F                     _ADCON1	set	159
   212                           
   213                           	psect	cinit
   214  07FC                     start_initialization:	
   215                           ; #config settings
   216                           
   217  07FC                     __initialization:
   218  07FC                     end_of_initialization:	
   219                           ;End of C runtime variable initialization code
   220                           
   221  07FC                     __end_of__initialization:
   222  07FC  0183               	clrf	3
   223  07FD  120A  118A  2F9F   	ljmp	_main	;jump to C main() function
   224                           
   225                           	psect	cstackCOMMON
   226  0070                     __pcstackCOMMON:
   227  0070                     ?_setup:
   228  0070                     ??_setup:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_ADC_Init:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ??_ADC_Init:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_main:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_ADC_Read:	
   241                           ; 1 bytes @ 0x0
   242                           
   243                           
   244                           ; 2 bytes @ 0x0
   245  0070                     	ds	2
   246  0072                     ??_ADC_Read:
   247                           
   248                           ; 1 bytes @ 0x2
   249  0072                     	ds	2
   250  0074                     ADC_Read@channel:
   251                           
   252                           ; 1 bytes @ 0x4
   253  0074                     	ds	1
   254  0075                     ??_main:
   255                           
   256                           ; 1 bytes @ 0x5
   257  0075                     	ds	2
   258  0077                     main@a:
   259                           
   260                           ; 2 bytes @ 0x7
   261  0077                     	ds	2
   262                           
   263                           	psect	maintext
   264  079F                     __pmaintext:	
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 52 in file "ADC MP.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;  a               2    7[COMMON] unsigned int 
   275 ;; Return value:  Size  Location     Type
   276 ;;                  1    wreg      void 
   277 ;; Registers used:
   278 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : B00/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   284 ;;      Params:         0       0       0       0       0
   285 ;;      Locals:         2       0       0       0       0
   286 ;;      Temps:          2       0       0       0       0
   287 ;;      Totals:         4       0       0       0       0
   288 ;;Total ram usage:        4 bytes
   289 ;; Hardware stack levels required when called:    1
   290 ;; This function calls:
   291 ;;		_ADC_Init
   292 ;;		_ADC_Read
   293 ;;		_setup
   294 ;; This function is called by:
   295 ;;		Startup code after reset
   296 ;; This function uses a non-reentrant model
   297 ;;
   298                           
   299                           
   300                           ;psect for function _main
   301  079F                     _main:
   302  079F                     l689:	
   303                           ;incstack = 0
   304                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   305                           
   306                           
   307                           ;ADC MP.c: 54:   unsigned int a;;ADC MP.c: 58:   setup();
   308  079F  120A  118A  2795  120A  118A  	fcall	_setup
   309                           
   310                           ;ADC MP.c: 59:   ADC_Init();
   311  07A4  120A  118A  278D  120A  118A  	fcall	_ADC_Init
   312  07A9                     l691:
   313                           
   314                           ;ADC MP.c: 62:     a = ADC_Read(0);
   315  07A9  3000               	movlw	0
   316  07AA  120A  118A  27C4  120A  118A  	fcall	_ADC_Read
   317  07AF  0871               	movf	?_ADC_Read+1,w
   318  07B0  00F8               	movwf	main@a+1
   319  07B1  0870               	movf	?_ADC_Read,w
   320  07B2  00F7               	movwf	main@a
   321  07B3                     l693:
   322                           
   323                           ;ADC MP.c: 64:     PORTB = a>>8;
   324  07B3  0878               	movf	main@a+1,w
   325  07B4  1283               	bcf	3,5	;RP0=0, select bank0
   326  07B5  1303               	bcf	3,6	;RP1=0, select bank0
   327  07B6  0086               	movwf	6	;volatile
   328  07B7                     l695:
   329                           
   330                           ;ADC MP.c: 65:     _delay((unsigned long)((50)*(8000000/4000.0)));
   331  07B7  3082               	movlw	130
   332  07B8  00F6               	movwf	??_main+1
   333  07B9  30DD               	movlw	221
   334  07BA  00F5               	movwf	??_main
   335  07BB                     u77:
   336  07BB  0BF5               	decfsz	??_main,f
   337  07BC  2FBB               	goto	u77
   338  07BD  0BF6               	decfsz	??_main+1,f
   339  07BE  2FBB               	goto	u77
   340  07BF  2FC0               	nop2
   341  07C0  2FA9               	goto	l691
   342  07C1  120A  118A  2800   	ljmp	start
   343  07C4                     __end_of_main:
   344                           
   345                           	psect	text1
   346  0795                     __ptext1:	
   347 ;; *************** function _setup *****************
   348 ;; Defined at:
   349 ;;		line 79 in file "ADC MP.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;		None
   352 ;; Auto vars:     Size  Location     Type
   353 ;;		None
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, status,2
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   363 ;;      Params:         0       0       0       0       0
   364 ;;      Locals:         0       0       0       0       0
   365 ;;      Temps:          0       0       0       0       0
   366 ;;      Totals:         0       0       0       0       0
   367 ;;Total ram usage:        0 bytes
   368 ;; Hardware stack levels used:    1
   369 ;; This function calls:
   370 ;;		Nothing
   371 ;; This function is called by:
   372 ;;		_main
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           
   377                           ;psect for function _setup
   378  0795                     _setup:
   379  0795                     l653:	
   380                           ;incstack = 0
   381                           ; Regs used in _setup: [wreg+status,2]
   382                           
   383                           
   384                           ;ADC MP.c: 81:   TRISA = 0xFF;
   385  0795  30FF               	movlw	255
   386  0796  1683               	bsf	3,5	;RP0=1, select bank1
   387  0797  1303               	bcf	3,6	;RP1=0, select bank1
   388  0798  0085               	movwf	5	;volatile
   389  0799                     l655:
   390                           
   391                           ;ADC MP.c: 83:   TRISB = 0x00;
   392  0799  0186               	clrf	6	;volatile
   393  079A                     l657:
   394                           
   395                           ;ADC MP.c: 85:   TRISC = 0;
   396  079A  0187               	clrf	7	;volatile
   397  079B                     l659:
   398                           
   399                           ;ADC MP.c: 86:   PORTC = 0;
   400  079B  1283               	bcf	3,5	;RP0=0, select bank0
   401  079C  1303               	bcf	3,6	;RP1=0, select bank0
   402  079D  0187               	clrf	7	;volatile
   403  079E                     l45:
   404  079E  0008               	return
   405  079F                     __end_of_setup:
   406                           
   407                           	psect	text2
   408  07C4                     __ptext2:	
   409 ;; *************** function _ADC_Read *****************
   410 ;; Defined at:
   411 ;;		line 35 in file "ADC MP.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;  channel         1    wreg     unsigned char 
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  channel         1    4[COMMON] unsigned char 
   416 ;; Return value:  Size  Location     Type
   417 ;;                  2    0[COMMON] unsigned int 
   418 ;; Registers used:
   419 ;;		wreg, status,2, status,0, btemp+1
   420 ;; Tracked objects:
   421 ;;		On entry : 0/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   425 ;;      Params:         2       0       0       0       0
   426 ;;      Locals:         1       0       0       0       0
   427 ;;      Temps:          2       0       0       0       0
   428 ;;      Totals:         5       0       0       0       0
   429 ;;Total ram usage:        5 bytes
   430 ;; Hardware stack levels used:    1
   431 ;; This function calls:
   432 ;;		Nothing
   433 ;; This function is called by:
   434 ;;		_main
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           
   439                           ;psect for function _ADC_Read
   440  07C4                     _ADC_Read:
   441                           
   442                           ;incstack = 0
   443                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
   444                           ;ADC_Read@channel stored from wreg
   445  07C4  00F4               	movwf	ADC_Read@channel
   446  07C5                     l673:
   447                           
   448                           ;ADC MP.c: 35: unsigned int ADC_Read(unsigned char channel);ADC MP.c: 36: {;ADC MP.c: 37
      +                          :   if(channel > 7)
   449  07C5  3008               	movlw	8
   450  07C6  0274               	subwf	ADC_Read@channel,w
   451  07C7  1C03               	skipc
   452  07C8  2FCA               	goto	u41
   453  07C9  2FCB               	goto	u40
   454  07CA                     u41:
   455  07CA  2FCE               	goto	l679
   456  07CB                     u40:
   457  07CB                     l675:
   458                           
   459                           ;ADC MP.c: 38:     return 0;
   460  07CB  01F0               	clrf	?_ADC_Read
   461  07CC  01F1               	clrf	?_ADC_Read+1
   462  07CD  2FFB               	goto	l28
   463  07CE                     l679:
   464                           
   465                           ;ADC MP.c: 40:   ADCON0 &= 0xC5;
   466  07CE  30C5               	movlw	197
   467  07CF  00FF               	movwf	btemp+1
   468  07D0  087F               	movf	btemp+1,w
   469  07D1  1283               	bcf	3,5	;RP0=0, select bank0
   470  07D2  1303               	bcf	3,6	;RP1=0, select bank0
   471  07D3  059F               	andwf	31,f	;volatile
   472                           
   473                           ;ADC MP.c: 41:   ADCON0 |= channel<<3;
   474  07D4  0874               	movf	ADC_Read@channel,w	;volatile
   475  07D5  00F2               	movwf	??_ADC_Read
   476  07D6  3002               	movlw	2
   477  07D7                     u55:
   478  07D7  1003               	clrc
   479  07D8  0DF2               	rlf	??_ADC_Read,f
   480  07D9  3EFF               	addlw	-1
   481  07DA  1D03               	skipz
   482  07DB  2FD7               	goto	u55
   483  07DC  1003               	clrc
   484  07DD  0D72               	rlf	??_ADC_Read,w
   485  07DE  00FF               	movwf	btemp+1
   486  07DF  087F               	movf	btemp+1,w
   487  07E0  049F               	iorwf	31,f	;volatile
   488  07E1                     l681:
   489                           
   490                           ;ADC MP.c: 42:   _delay((unsigned long)((2)*(8000000/4000.0)));
   491  07E1  3006               	movlw	6
   492  07E2  00F3               	movwf	??_ADC_Read+1
   493  07E3  3030               	movlw	48
   494  07E4  00F2               	movwf	??_ADC_Read
   495  07E5                     u87:
   496  07E5  0BF2               	decfsz	??_ADC_Read,f
   497  07E6  2FE5               	goto	u87
   498  07E7  0BF3               	decfsz	??_ADC_Read+1,f
   499  07E8  2FE5               	goto	u87
   500  07E9  0000               	nop
   501  07EA                     l683:
   502                           
   503                           ;ADC MP.c: 43:   GO_nDONE = 1;
   504  07EA  1283               	bcf	3,5	;RP0=0, select bank0
   505  07EB  1303               	bcf	3,6	;RP1=0, select bank0
   506  07EC  149F               	bsf	31,1	;volatile
   507  07ED                     l29:	
   508                           ;ADC MP.c: 44:   while(GO_nDONE);
   509                           
   510  07ED  189F               	btfsc	31,1	;volatile
   511  07EE  2FF0               	goto	u61
   512  07EF  2FF1               	goto	u60
   513  07F0                     u61:
   514  07F0  2FED               	goto	l29
   515  07F1                     u60:
   516  07F1                     l685:
   517                           
   518                           ;ADC MP.c: 45:   return (ADRESH<<8);
   519  07F1  081E               	movf	30,w	;volatile
   520  07F2  00F2               	movwf	??_ADC_Read
   521  07F3  01F3               	clrf	??_ADC_Read+1
   522  07F4  0872               	movf	??_ADC_Read,w
   523  07F5  00F3               	movwf	??_ADC_Read+1
   524  07F6  01F2               	clrf	??_ADC_Read
   525  07F7  0872               	movf	??_ADC_Read,w
   526  07F8  00F0               	movwf	?_ADC_Read
   527  07F9  0873               	movf	??_ADC_Read+1,w
   528  07FA  00F1               	movwf	?_ADC_Read+1
   529  07FB                     l28:
   530  07FB  0008               	return
   531  07FC                     __end_of_ADC_Read:
   532                           
   533                           	psect	text3
   534  078D                     __ptext3:	
   535 ;; *************** function _ADC_Init *****************
   536 ;; Defined at:
   537 ;;		line 73 in file "ADC MP.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, status,2
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   551 ;;      Params:         0       0       0       0       0
   552 ;;      Locals:         0       0       0       0       0
   553 ;;      Temps:          0       0       0       0       0
   554 ;;      Totals:         0       0       0       0       0
   555 ;;Total ram usage:        0 bytes
   556 ;; Hardware stack levels used:    1
   557 ;; This function calls:
   558 ;;		Nothing
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           
   565                           ;psect for function _ADC_Init
   566  078D                     _ADC_Init:
   567  078D                     l661:	
   568                           ;incstack = 0
   569                           ; Regs used in _ADC_Init: [wreg+status,2]
   570                           
   571                           
   572                           ;ADC MP.c: 75:   ADCON0 = 0x81;
   573  078D  3081               	movlw	129
   574  078E  1283               	bcf	3,5	;RP0=0, select bank0
   575  078F  1303               	bcf	3,6	;RP1=0, select bank0
   576  0790  009F               	movwf	31	;volatile
   577  0791                     l663:
   578                           
   579                           ;ADC MP.c: 76:   ADCON1 = 0x00;
   580  0791  1683               	bsf	3,5	;RP0=1, select bank1
   581  0792  1303               	bcf	3,6	;RP1=0, select bank1
   582  0793  019F               	clrf	31	;volatile
   583  0794                     l42:
   584  0794  0008               	return
   585  0795                     __end_of_ADC_Init:
   586  007E                     btemp	set	126	;btemp
   587  007E                     wtemp0	set	126
   588                           
   589                           	psect	config
   590                           
   591                           ;Config register CONFIG1 @ 0x2007
   592                           ;	Oscillator Selection bits
   593                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   594                           ;	Watchdog Timer Enable bit
   595                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   596                           ;	Power-up Timer Enable bit
   597                           ;	PWRTE = OFF, PWRT disabled
   598                           ;	RE3/MCLR pin function select bit
   599                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   600                           ;	Code Protection bit
   601                           ;	CP = OFF, Program memory code protection is disabled
   602                           ;	Data Code Protection bit
   603                           ;	CPD = OFF, Data memory code protection is disabled
   604                           ;	Brown Out Reset Selection bits
   605                           ;	BOREN = OFF, BOR disabled
   606                           ;	Internal External Switchover bit
   607                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   608                           ;	Fail-Safe Clock Monitor Enabled bit
   609                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   610                           ;	Low Voltage Programming Enable bit
   611                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   612                           ;	In-Circuit Debugger Mode bit
   613                           ;	DEBUG = 0x1, unprogrammed default
   614  2007                     	org	8199
   615  2007  20D4               	dw	8404
   616                           
   617                           ;Config register CONFIG2 @ 0x2008
   618                           ;	Brown-out Reset Selection bit
   619                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   620                           ;	Flash Program Memory Self Write Enable bits
   621                           ;	WRT = OFF, Write protection off
   622  2008                     	org	8200
   623  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      67
                                              5 COMMON     4     4      0
                           _ADC_Init
                           _ADC_Read
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Feb 22 23:46:03 2021

                     l42 0794                       l28 07FB                       l29 07ED  
                     l45 079E                       u40 07CB                       u41 07CA  
                     u60 07F1                       u61 07F0                       u55 07D7  
                     u77 07BB                       u87 07E5                      l661 078D  
                    l653 0795                      l663 0791                      l655 0799  
                    l681 07E1                      l673 07C5                      l657 079A  
                    l683 07EA                      l675 07CB                      l659 079B  
                    l691 07A9                      l685 07F1                      l693 07B3  
                    l679 07CE                      l695 07B7                      l689 079F  
                   _main 079F                     btemp 007E         __end_of_ADC_Init 0795  
       __end_of_ADC_Read 07FC                     start 0000                    ?_main 0070  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _setup 0795  
                  main@a 0077                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 07C4                   ??_main 0075  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 ?_setup 0070          ADC_Read@channel 0074                ?_ADC_Init 0070  
              ?_ADC_Read 0070  __end_of__initialization 07FC           __pcstackCOMMON 0070  
          __end_of_setup 079F               ??_ADC_Init 0070               ??_ADC_Read 0072  
                ??_setup 0070               __pmaintext 079F                  __ptext1 0795  
                __ptext2 07C4                  __ptext3 078D     end_of_initialization 07FC  
      __size_of_ADC_Init 0008        __size_of_ADC_Read 0038      start_initialization 07FC  
              ___latbits 0002                 _ADC_Init 078D                 _ADC_Read 07C4  
         __size_of_setup 000A                 _GO_nDONE 00F9            __size_of_main 0025  
